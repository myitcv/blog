---
date: 2013-03-10
layout: post
title: Using figaro and bash for a smoother development config environment
location: San Francisco
author: paul
tags:
- coding
- ruby
- rails
---

Environment variables have for a long time been the source of configuration data for (many) Unix-based applications.

"Figaro":https://github.com/laserlemon/figaro is a great @gem@ that makes it easy to combine environment variables with Yaml-based overrides.

bq.. 

Open sourcing a Rails app can be a little tricky when it comes to sensitive configuration information like Pusher or Stripe credentials. You don't want to check private credentials into the repo but what other choice is there?

Figaro provides a clean and simple way to configure your app and keep the private stuffâ€¦ private.

p. Here I outline a neat method by which per project environment variables can be set using Bash to combine with the standard figaro mode of operation.

We start by creating a secrets file in our @$HOME@ directory, well away from any Rails projects:

{% highlight ini %}
# $HOME/.web_app_secrets

[project-name]
VAR_1=test
VAR_2=again
{% endhighlight %}

The format here is very simple. @project-name@ should correspond to the directory which contains the Rails project in question. For example if our Rails project is found in @$HOME/dev/omniauth-google-oauth2-example@ we would be @omniauth-google-oauth2-example@ in place of @project-name@. The variable names should be "capitalised by convention":http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_03_02.html#sect_03_02_02 and correspond exactly to how you would normally set a Bash variable (e.g. putting spaces around the equal sign will cause errors)

Clearly this configuration file could get quite long and contain multiple sections:

{% highlight ini %}
# $HOME/.web_app_secrets

[project-1-name]
VAR_1=test
VAR_2=again

[project-2-name]
VAR_1=test
VAR_2=again

[project-3-name]
VAR_1=test
VAR_2=again
{% endhighlight %}

Now we need to hook up Bash so that whenever we @cd@ to a directory that contains a figaro-enabled project it sources the appropriate environment variables. 

A standard figaro installation creates a @config/application.yml@ file (see the "omnitauth example for details":/2013/02/19/omniauth-google-oauth2-example.html). Hence we can test for the existence of this file in our hook. 

Edit @$HOME/.bashrc@ to include the following (taking care if you have already aliased @cd@):

{% highlight bash %}
# $HOME/.bashrc
# ...

alias cd=_cd_special

_cd_special ()
{
  "cd" $1
  if [ -e "$PWD/config/application.yml" ] # we are using figaro
  then
    selector=`basename $PWD`
    $(cat $HOME/.web_app_secrets | sed -n -e "/\[$selector\]/,/^\[/p" | grep -v "^\[" | grep -v "^[ \t]*$" | sed -e 's/^/export /')
  fi
}

# ...
{% endhighlight %}

So how do we now use these variables in our code? Here's an example:

{% highlight ruby %}
# config/initializers/oauth.rb

Rails.application.config.middleware.use OmniAuth::Builder do
  provider :google_oauth2, 
    ENV['VAR_1'],
    ENV['VAR_2'],
    {name: "google_login", approval_prompt: ''}
end
{% endhighlight %}

Furthermore, these environment variables can be overridden within the project config:

{% highlight yaml %}
# config/application.yml

VAR_1: "value"
{% endhighlight %}

Notice the different style of setting values (see the "Wikipedia":http://en.wikipedia.org/wiki/YAML for a definitive reference on YAML). 

There are further benefits to using figaro when it comes to deploying to "Heroku":http://www.heroku.com/ but this is covered in the "project's README":https://github.com/laserlemon/figaro
